// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: engine_gcmessages.proto

#include "engine_gcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CEngineGotvSyncPacket::CEngineGotvSyncPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.instance_id_)*/0u
  , /*decltype(_impl_.signupfragment_)*/0u
  , /*decltype(_impl_.currentfragment_)*/0u
  , /*decltype(_impl_.tickrate_)*/0
  , /*decltype(_impl_.tick_)*/0u
  , /*decltype(_impl_.rtdelay_)*/0
  , /*decltype(_impl_.rcvage_)*/0
  , /*decltype(_impl_.keyframe_interval_)*/0
  , /*decltype(_impl_.cdndelay_)*/0u} {}
struct CEngineGotvSyncPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CEngineGotvSyncPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CEngineGotvSyncPacketDefaultTypeInternal() {}
  union {
    CEngineGotvSyncPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CEngineGotvSyncPacketDefaultTypeInternal _CEngineGotvSyncPacket_default_instance_;

// ===================================================================

class CEngineGotvSyncPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<CEngineGotvSyncPacket>()._impl_._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_signupfragment(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_currentfragment(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tickrate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tick(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rtdelay(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rcvage(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_keyframe_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cdndelay(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CEngineGotvSyncPacket::CEngineGotvSyncPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CEngineGotvSyncPacket)
}
CEngineGotvSyncPacket::CEngineGotvSyncPacket(const CEngineGotvSyncPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CEngineGotvSyncPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.instance_id_){}
    , decltype(_impl_.signupfragment_){}
    , decltype(_impl_.currentfragment_){}
    , decltype(_impl_.tickrate_){}
    , decltype(_impl_.tick_){}
    , decltype(_impl_.rtdelay_){}
    , decltype(_impl_.rcvage_){}
    , decltype(_impl_.keyframe_interval_){}
    , decltype(_impl_.cdndelay_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cdndelay_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.cdndelay_));
  // @@protoc_insertion_point(copy_constructor:CEngineGotvSyncPacket)
}

inline void CEngineGotvSyncPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.instance_id_){0u}
    , decltype(_impl_.signupfragment_){0u}
    , decltype(_impl_.currentfragment_){0u}
    , decltype(_impl_.tickrate_){0}
    , decltype(_impl_.tick_){0u}
    , decltype(_impl_.rtdelay_){0}
    , decltype(_impl_.rcvage_){0}
    , decltype(_impl_.keyframe_interval_){0}
    , decltype(_impl_.cdndelay_){0u}
  };
}

CEngineGotvSyncPacket::~CEngineGotvSyncPacket() {
  // @@protoc_insertion_point(destructor:CEngineGotvSyncPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CEngineGotvSyncPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CEngineGotvSyncPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CEngineGotvSyncPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:CEngineGotvSyncPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.rcvage_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.rcvage_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.keyframe_interval_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cdndelay_) -
        reinterpret_cast<char*>(&_impl_.keyframe_interval_)) + sizeof(_impl_.cdndelay_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CEngineGotvSyncPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 instance_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_instance_id(&has_bits);
          _impl_.instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 signupfragment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_signupfragment(&has_bits);
          _impl_.signupfragment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 currentfragment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_currentfragment(&has_bits);
          _impl_.currentfragment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tickrate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_tickrate(&has_bits);
          _impl_.tickrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tick = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_tick(&has_bits);
          _impl_.tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float rtdelay = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_rtdelay(&has_bits);
          _impl_.rtdelay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float rcvage = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_rcvage(&has_bits);
          _impl_.rcvage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float keyframe_interval = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_keyframe_interval(&has_bits);
          _impl_.keyframe_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cdndelay = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_cdndelay(&has_bits);
          _impl_.cdndelay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CEngineGotvSyncPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEngineGotvSyncPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional uint32 instance_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_instance_id(), target);
  }

  // optional uint32 signupfragment = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_signupfragment(), target);
  }

  // optional uint32 currentfragment = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_currentfragment(), target);
  }

  // optional float tickrate = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_tickrate(), target);
  }

  // optional uint32 tick = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_tick(), target);
  }

  // optional float rtdelay = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_rtdelay(), target);
  }

  // optional float rcvage = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_rcvage(), target);
  }

  // optional float keyframe_interval = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_keyframe_interval(), target);
  }

  // optional uint32 cdndelay = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_cdndelay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEngineGotvSyncPacket)
  return target;
}

size_t CEngineGotvSyncPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEngineGotvSyncPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint32 instance_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_instance_id());
    }

    // optional uint32 signupfragment = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_signupfragment());
    }

    // optional uint32 currentfragment = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_currentfragment());
    }

    // optional float tickrate = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional uint32 tick = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tick());
    }

    // optional float rtdelay = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float rcvage = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional float keyframe_interval = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional uint32 cdndelay = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cdndelay());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEngineGotvSyncPacket::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CEngineGotvSyncPacket*>(
      &from));
}

void CEngineGotvSyncPacket::MergeFrom(const CEngineGotvSyncPacket& from) {
  CEngineGotvSyncPacket* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:CEngineGotvSyncPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.instance_id_ = from._impl_.instance_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.signupfragment_ = from._impl_.signupfragment_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.currentfragment_ = from._impl_.currentfragment_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tickrate_ = from._impl_.tickrate_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tick_ = from._impl_.tick_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.rtdelay_ = from._impl_.rtdelay_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.rcvage_ = from._impl_.rcvage_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.keyframe_interval_ = from._impl_.keyframe_interval_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.cdndelay_ = from._impl_.cdndelay_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CEngineGotvSyncPacket::CopyFrom(const CEngineGotvSyncPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEngineGotvSyncPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEngineGotvSyncPacket::IsInitialized() const {
  return true;
}

void CEngineGotvSyncPacket::InternalSwap(CEngineGotvSyncPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CEngineGotvSyncPacket, _impl_.cdndelay_)
      + sizeof(CEngineGotvSyncPacket::_impl_.cdndelay_)
      - PROTOBUF_FIELD_OFFSET(CEngineGotvSyncPacket, _impl_.match_id_)>(
          reinterpret_cast<char*>(&_impl_.match_id_),
          reinterpret_cast<char*>(&other->_impl_.match_id_));
}

std::string CEngineGotvSyncPacket::GetTypeName() const {
  return "CEngineGotvSyncPacket";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CEngineGotvSyncPacket*
Arena::CreateMaybeMessage< ::CEngineGotvSyncPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEngineGotvSyncPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
