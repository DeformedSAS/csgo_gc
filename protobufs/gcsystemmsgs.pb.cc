// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gcsystemmsgs.proto

#include "gcsystemmsgs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CMsgGCHVacVerificationChange::CMsgGCHVacVerificationChange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.appid_)*/0u
  , /*decltype(_impl_.is_verified_)*/false} {}
struct CMsgGCHVacVerificationChangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCHVacVerificationChangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCHVacVerificationChangeDefaultTypeInternal() {}
  union {
    CMsgGCHVacVerificationChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCHVacVerificationChangeDefaultTypeInternal _CMsgGCHVacVerificationChange_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCHAccountPhoneNumberChange::CMsgGCHAccountPhoneNumberChange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.phone_id_)*/uint64_t{0u}
  , /*decltype(_impl_.appid_)*/0u
  , /*decltype(_impl_.is_verified_)*/false
  , /*decltype(_impl_.is_identifying_)*/false} {}
struct CMsgGCHAccountPhoneNumberChangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCHAccountPhoneNumberChangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCHAccountPhoneNumberChangeDefaultTypeInternal() {}
  union {
    CMsgGCHAccountPhoneNumberChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCHAccountPhoneNumberChangeDefaultTypeInternal _CMsgGCHAccountPhoneNumberChange_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCHInviteUserToLobby::CMsgGCHInviteUserToLobby(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.steamid_invited_)*/uint64_t{0u}
  , /*decltype(_impl_.steamid_lobby_)*/uint64_t{0u}
  , /*decltype(_impl_.appid_)*/0u} {}
struct CMsgGCHInviteUserToLobbyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCHInviteUserToLobbyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCHInviteUserToLobbyDefaultTypeInternal() {}
  union {
    CMsgGCHInviteUserToLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCHInviteUserToLobbyDefaultTypeInternal _CMsgGCHInviteUserToLobby_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCHRecurringSubscriptionStatusChange::CMsgGCHRecurringSubscriptionStatusChange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.agreementid_)*/uint64_t{0u}
  , /*decltype(_impl_.appid_)*/0u
  , /*decltype(_impl_.active_)*/false} {}
struct CMsgGCHRecurringSubscriptionStatusChangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCHRecurringSubscriptionStatusChangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCHRecurringSubscriptionStatusChangeDefaultTypeInternal() {}
  union {
    CMsgGCHRecurringSubscriptionStatusChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCHRecurringSubscriptionStatusChangeDefaultTypeInternal _CMsgGCHRecurringSubscriptionStatusChange_default_instance_;
PROTOBUF_CONSTEXPR CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/uint64_t{0u}
  , /*decltype(_impl_.attribute_)*/0u} {}
struct CQuest_PublisherAddCommunityItemsToPlayer_Request_AttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CQuest_PublisherAddCommunityItemsToPlayer_Request_AttributeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CQuest_PublisherAddCommunityItemsToPlayer_Request_AttributeDefaultTypeInternal() {}
  union {
    CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CQuest_PublisherAddCommunityItemsToPlayer_Request_AttributeDefaultTypeInternal _CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute_default_instance_;
PROTOBUF_CONSTEXPR CQuest_PublisherAddCommunityItemsToPlayer_Request::CQuest_PublisherAddCommunityItemsToPlayer_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attributes_)*/{}
  , /*decltype(_impl_.prefix_item_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.note_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.appid_)*/0u
  , /*decltype(_impl_.match_item_type_)*/0u
  , /*decltype(_impl_.match_item_class_)*/0u} {}
struct CQuest_PublisherAddCommunityItemsToPlayer_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CQuest_PublisherAddCommunityItemsToPlayer_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CQuest_PublisherAddCommunityItemsToPlayer_RequestDefaultTypeInternal() {}
  union {
    CQuest_PublisherAddCommunityItemsToPlayer_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CQuest_PublisherAddCommunityItemsToPlayer_RequestDefaultTypeInternal _CQuest_PublisherAddCommunityItemsToPlayer_Request_default_instance_;
PROTOBUF_CONSTEXPR CQuest_PublisherAddCommunityItemsToPlayer_Response::CQuest_PublisherAddCommunityItemsToPlayer_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.items_matched_)*/0u
  , /*decltype(_impl_.items_granted_)*/0u} {}
struct CQuest_PublisherAddCommunityItemsToPlayer_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CQuest_PublisherAddCommunityItemsToPlayer_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CQuest_PublisherAddCommunityItemsToPlayer_ResponseDefaultTypeInternal() {}
  union {
    CQuest_PublisherAddCommunityItemsToPlayer_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CQuest_PublisherAddCommunityItemsToPlayer_ResponseDefaultTypeInternal _CQuest_PublisherAddCommunityItemsToPlayer_Response_default_instance_;
PROTOBUF_CONSTEXPR CCommunity_GamePersonalDataCategoryInfo::CCommunity_GamePersonalDataCategoryInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.localization_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.template_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CCommunity_GamePersonalDataCategoryInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCommunity_GamePersonalDataCategoryInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCommunity_GamePersonalDataCategoryInfoDefaultTypeInternal() {}
  union {
    CCommunity_GamePersonalDataCategoryInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCommunity_GamePersonalDataCategoryInfoDefaultTypeInternal _CCommunity_GamePersonalDataCategoryInfo_default_instance_;
PROTOBUF_CONSTEXPR CCommunity_GetGamePersonalDataCategories_Request::CCommunity_GetGamePersonalDataCategories_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.appid_)*/0u} {}
struct CCommunity_GetGamePersonalDataCategories_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCommunity_GetGamePersonalDataCategories_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCommunity_GetGamePersonalDataCategories_RequestDefaultTypeInternal() {}
  union {
    CCommunity_GetGamePersonalDataCategories_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCommunity_GetGamePersonalDataCategories_RequestDefaultTypeInternal _CCommunity_GetGamePersonalDataCategories_Request_default_instance_;
PROTOBUF_CONSTEXPR CCommunity_GetGamePersonalDataCategories_Response::CCommunity_GetGamePersonalDataCategories_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.categories_)*/{}
  , /*decltype(_impl_.app_assets_basename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CCommunity_GetGamePersonalDataCategories_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCommunity_GetGamePersonalDataCategories_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCommunity_GetGamePersonalDataCategories_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_GetGamePersonalDataCategories_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCommunity_GetGamePersonalDataCategories_ResponseDefaultTypeInternal _CCommunity_GetGamePersonalDataCategories_Response_default_instance_;
PROTOBUF_CONSTEXPR CCommunity_GetGamePersonalDataEntries_Request::CCommunity_GetGamePersonalDataEntries_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.continue_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.appid_)*/0u} {}
struct CCommunity_GetGamePersonalDataEntries_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCommunity_GetGamePersonalDataEntries_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCommunity_GetGamePersonalDataEntries_RequestDefaultTypeInternal() {}
  union {
    CCommunity_GetGamePersonalDataEntries_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCommunity_GetGamePersonalDataEntries_RequestDefaultTypeInternal _CCommunity_GetGamePersonalDataEntries_Request_default_instance_;
PROTOBUF_CONSTEXPR CCommunity_GetGamePersonalDataEntries_Response::CCommunity_GetGamePersonalDataEntries_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.continue_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.continue_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gceresult_)*/0u} {}
struct CCommunity_GetGamePersonalDataEntries_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCommunity_GetGamePersonalDataEntries_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCommunity_GetGamePersonalDataEntries_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_GetGamePersonalDataEntries_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCommunity_GetGamePersonalDataEntries_ResponseDefaultTypeInternal _CCommunity_GetGamePersonalDataEntries_Response_default_instance_;
PROTOBUF_CONSTEXPR CCommunity_TerminateGamePersonalDataEntries_Request::CCommunity_TerminateGamePersonalDataEntries_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.appid_)*/0u} {}
struct CCommunity_TerminateGamePersonalDataEntries_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCommunity_TerminateGamePersonalDataEntries_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCommunity_TerminateGamePersonalDataEntries_RequestDefaultTypeInternal() {}
  union {
    CCommunity_TerminateGamePersonalDataEntries_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCommunity_TerminateGamePersonalDataEntries_RequestDefaultTypeInternal _CCommunity_TerminateGamePersonalDataEntries_Request_default_instance_;
PROTOBUF_CONSTEXPR CCommunity_TerminateGamePersonalDataEntries_Response::CCommunity_TerminateGamePersonalDataEntries_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gceresult_)*/0u} {}
struct CCommunity_TerminateGamePersonalDataEntries_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCommunity_TerminateGamePersonalDataEntries_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCommunity_TerminateGamePersonalDataEntries_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_TerminateGamePersonalDataEntries_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCommunity_TerminateGamePersonalDataEntries_ResponseDefaultTypeInternal _CCommunity_TerminateGamePersonalDataEntries_Response_default_instance_;
bool EGCSystemMsg_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 10:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 101:
    case 102:
    case 104:
    case 105:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 512:
    case 513:
    case 518:
    case 519:
    case 523:
    case 524:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
    case 530:
    case 531:
    case 532:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> EGCSystemMsg_strings[92] = {};

static const char EGCSystemMsg_names[] =
  "k_EGCMsgAccountPhoneNumberChange"
  "k_EGCMsgAchievementAwarded"
  "k_EGCMsgAddFreeLicense"
  "k_EGCMsgAddFreeLicenseResponse"
  "k_EGCMsgAppInfoUpdated"
  "k_EGCMsgCheckFriendship"
  "k_EGCMsgCheckFriendshipResponse"
  "k_EGCMsgConCommand"
  "k_EGCMsgDPPartnerMicroTxns"
  "k_EGCMsgDPPartnerMicroTxnsResponse"
  "k_EGCMsgDirectServiceMethod"
  "k_EGCMsgDirectServiceMethodResponse"
  "k_EGCMsgFindAccounts"
  "k_EGCMsgGCAccountVacStatusChange"
  "k_EGCMsgGenericReply"
  "k_EGCMsgGetAccountDetails"
  "k_EGCMsgGetAccountDetailsResponse"
  "k_EGCMsgGetAccountDetails_DEPRECATED"
  "k_EGCMsgGetCommands"
  "k_EGCMsgGetCommandsResponse"
  "k_EGCMsgGetEmailTemplate"
  "k_EGCMsgGetEmailTemplateResponse"
  "k_EGCMsgGetGamePersonalDataCategoriesRequest"
  "k_EGCMsgGetGamePersonalDataCategoriesResponse"
  "k_EGCMsgGetGamePersonalDataEntriesRequest"
  "k_EGCMsgGetGamePersonalDataEntriesResponse"
  "k_EGCMsgGetIPLocation"
  "k_EGCMsgGetIPLocationResponse"
  "k_EGCMsgGetLicenses"
  "k_EGCMsgGetPartnerAccountLink"
  "k_EGCMsgGetPartnerAccountLinkResponse"
  "k_EGCMsgGetPersonaNames"
  "k_EGCMsgGetPersonaNamesResponse"
  "k_EGCMsgGetPurchaseTrustStatus"
  "k_EGCMsgGetPurchaseTrustStatusResponse"
  "k_EGCMsgGetSystemStats"
  "k_EGCMsgGetSystemStatsResponse"
  "k_EGCMsgGetUserGameStatsSchema"
  "k_EGCMsgGetUserGameStatsSchemaResponse"
  "k_EGCMsgGetUserStats"
  "k_EGCMsgGetUserStatsDEPRECATED"
  "k_EGCMsgGetUserStatsResponse"
  "k_EGCMsgGrantGuestPass"
  "k_EGCMsgGrantGuestPassResponse"
  "k_EGCMsgInvalid"
  "k_EGCMsgInviteUserToLobby"
  "k_EGCMsgLookupAccountFromInput"
  "k_EGCMsgMasterSetClientMsgRouting"
  "k_EGCMsgMasterSetClientMsgRoutingResponse"
  "k_EGCMsgMasterSetDirectory"
  "k_EGCMsgMasterSetDirectoryResponse"
  "k_EGCMsgMasterSetWebAPIRouting"
  "k_EGCMsgMasterSetWebAPIRoutingResponse"
  "k_EGCMsgMemCachedDelete"
  "k_EGCMsgMemCachedGet"
  "k_EGCMsgMemCachedGetResponse"
  "k_EGCMsgMemCachedSet"
  "k_EGCMsgMemCachedStats"
  "k_EGCMsgMemCachedStatsResponse"
  "k_EGCMsgMulti"
  "k_EGCMsgMultiplexMsg"
  "k_EGCMsgMultiplexMsgResponse"
  "k_EGCMsgPostAlert"
  "k_EGCMsgPreTestSetup"
  "k_EGCMsgReceiveInterAppMessage"
  "k_EGCMsgRecordSupportAction"
  "k_EGCMsgRecurringSubscriptionStatusChange"
  "k_EGCMsgSendEmail"
  "k_EGCMsgSendEmailResponse"
  "k_EGCMsgSendHTTPRequest"
  "k_EGCMsgSendHTTPRequestResponse"
  "k_EGCMsgSetOptions"
  "k_EGCMsgSetOptionsResponse"
  "k_EGCMsgStartGameserver"
  "k_EGCMsgStartPlaying"
  "k_EGCMsgStopGameserver"
  "k_EGCMsgStopPlaying"
  "k_EGCMsgSystemBase"
  "k_EGCMsgSystemBase2"
  "k_EGCMsgSystemStatsSchema"
  "k_EGCMsgTerminateGamePersonalDataEntriesRequest"
  "k_EGCMsgTerminateGamePersonalDataEntriesResponse"
  "k_EGCMsgUpdateSession"
  "k_EGCMsgVacVerificationChange"
  "k_EGCMsgValidateSession"
  "k_EGCMsgValidateSessionResponse"
  "k_EGCMsgWGRequest"
  "k_EGCMsgWGResponse"
  "k_EGCMsgWebAPIJobRequest"
  "k_EGCMsgWebAPIJobRequestForwardResponse"
  "k_EGCMsgWebAPIJobRequestHttpResponse"
  "k_EGCMsgWebAPIRegisterInterfaces";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry EGCSystemMsg_entries[] = {
  { {EGCSystemMsg_names + 0, 32}, 519 },
  { {EGCSystemMsg_names + 32, 26}, 51 },
  { {EGCSystemMsg_names + 58, 22}, 80 },
  { {EGCSystemMsg_names + 80, 30}, 81 },
  { {EGCSystemMsg_names + 110, 22}, 63 },
  { {EGCSystemMsg_names + 132, 23}, 505 },
  { {EGCSystemMsg_names + 155, 31}, 506 },
  { {EGCSystemMsg_names + 186, 18}, 52 },
  { {EGCSystemMsg_names + 204, 26}, 512 },
  { {EGCSystemMsg_names + 230, 34}, 513 },
  { {EGCSystemMsg_names + 264, 27}, 531 },
  { {EGCSystemMsg_names + 291, 35}, 532 },
  { {EGCSystemMsg_names + 326, 20}, 74 },
  { {EGCSystemMsg_names + 346, 32}, 504 },
  { {EGCSystemMsg_names + 378, 20}, 10 },
  { {EGCSystemMsg_names + 398, 25}, 93 },
  { {EGCSystemMsg_names + 423, 33}, 94 },
  { {EGCSystemMsg_names + 456, 36}, 71 },
  { {EGCSystemMsg_names + 492, 19}, 78 },
  { {EGCSystemMsg_names + 511, 27}, 79 },
  { {EGCSystemMsg_names + 538, 24}, 89 },
  { {EGCSystemMsg_names + 562, 32}, 90 },
  { {EGCSystemMsg_names + 594, 44}, 524 },
  { {EGCSystemMsg_names + 638, 45}, 525 },
  { {EGCSystemMsg_names + 683, 41}, 526 },
  { {EGCSystemMsg_names + 724, 42}, 527 },
  { {EGCSystemMsg_names + 766, 21}, 82 },
  { {EGCSystemMsg_names + 787, 29}, 83 },
  { {EGCSystemMsg_names + 816, 19}, 76 },
  { {EGCSystemMsg_names + 835, 29}, 507 },
  { {EGCSystemMsg_names + 864, 37}, 508 },
  { {EGCSystemMsg_names + 901, 23}, 95 },
  { {EGCSystemMsg_names + 924, 31}, 96 },
  { {EGCSystemMsg_names + 955, 30}, 501 },
  { {EGCSystemMsg_names + 985, 38}, 502 },
  { {EGCSystemMsg_names + 1023, 22}, 85 },
  { {EGCSystemMsg_names + 1045, 30}, 86 },
  { {EGCSystemMsg_names + 1075, 30}, 59 },
  { {EGCSystemMsg_names + 1105, 38}, 60 },
  { {EGCSystemMsg_names + 1143, 20}, 77 },
  { {EGCSystemMsg_names + 1163, 30}, 61 },
  { {EGCSystemMsg_names + 1193, 28}, 62 },
  { {EGCSystemMsg_names + 1221, 22}, 91 },
  { {EGCSystemMsg_names + 1243, 30}, 92 },
  { {EGCSystemMsg_names + 1273, 15}, 0 },
  { {EGCSystemMsg_names + 1288, 25}, 523 },
  { {EGCSystemMsg_names + 1313, 30}, 66 },
  { {EGCSystemMsg_names + 1343, 33}, 224 },
  { {EGCSystemMsg_names + 1376, 41}, 225 },
  { {EGCSystemMsg_names + 1417, 26}, 220 },
  { {EGCSystemMsg_names + 1443, 34}, 221 },
  { {EGCSystemMsg_names + 1477, 30}, 222 },
  { {EGCSystemMsg_names + 1507, 38}, 223 },
  { {EGCSystemMsg_names + 1545, 23}, 203 },
  { {EGCSystemMsg_names + 1568, 20}, 200 },
  { {EGCSystemMsg_names + 1588, 28}, 201 },
  { {EGCSystemMsg_names + 1616, 20}, 202 },
  { {EGCSystemMsg_names + 1636, 22}, 204 },
  { {EGCSystemMsg_names + 1658, 30}, 205 },
  { {EGCSystemMsg_names + 1688, 13}, 1 },
  { {EGCSystemMsg_names + 1701, 20}, 97 },
  { {EGCSystemMsg_names + 1721, 28}, 98 },
  { {EGCSystemMsg_names + 1749, 17}, 75 },
  { {EGCSystemMsg_names + 1766, 20}, 69 },
  { {EGCSystemMsg_names + 1786, 30}, 73 },
  { {EGCSystemMsg_names + 1816, 27}, 70 },
  { {EGCSystemMsg_names + 1843, 41}, 530 },
  { {EGCSystemMsg_names + 1884, 17}, 87 },
  { {EGCSystemMsg_names + 1901, 25}, 88 },
  { {EGCSystemMsg_names + 1926, 23}, 67 },
  { {EGCSystemMsg_names + 1949, 31}, 68 },
  { {EGCSystemMsg_names + 1980, 18}, 226 },
  { {EGCSystemMsg_names + 1998, 26}, 227 },
  { {EGCSystemMsg_names + 2024, 23}, 55 },
  { {EGCSystemMsg_names + 2047, 20}, 53 },
  { {EGCSystemMsg_names + 2067, 22}, 56 },
  { {EGCSystemMsg_names + 2089, 19}, 54 },
  { {EGCSystemMsg_names + 2108, 18}, 50 },
  { {EGCSystemMsg_names + 2126, 19}, 500 },
  { {EGCSystemMsg_names + 2145, 25}, 84 },
  { {EGCSystemMsg_names + 2170, 47}, 528 },
  { {EGCSystemMsg_names + 2217, 48}, 529 },
  { {EGCSystemMsg_names + 2265, 21}, 503 },
  { {EGCSystemMsg_names + 2286, 29}, 518 },
  { {EGCSystemMsg_names + 2315, 23}, 64 },
  { {EGCSystemMsg_names + 2338, 31}, 65 },
  { {EGCSystemMsg_names + 2369, 17}, 57 },
  { {EGCSystemMsg_names + 2386, 18}, 58 },
  { {EGCSystemMsg_names + 2404, 24}, 102 },
  { {EGCSystemMsg_names + 2428, 39}, 105 },
  { {EGCSystemMsg_names + 2467, 36}, 104 },
  { {EGCSystemMsg_names + 2503, 32}, 101 },
};

static const int EGCSystemMsg_entries_by_number[] = {
  44, // 0 -> k_EGCMsgInvalid
  59, // 1 -> k_EGCMsgMulti
  14, // 10 -> k_EGCMsgGenericReply
  77, // 50 -> k_EGCMsgSystemBase
  1, // 51 -> k_EGCMsgAchievementAwarded
  7, // 52 -> k_EGCMsgConCommand
  74, // 53 -> k_EGCMsgStartPlaying
  76, // 54 -> k_EGCMsgStopPlaying
  73, // 55 -> k_EGCMsgStartGameserver
  75, // 56 -> k_EGCMsgStopGameserver
  86, // 57 -> k_EGCMsgWGRequest
  87, // 58 -> k_EGCMsgWGResponse
  37, // 59 -> k_EGCMsgGetUserGameStatsSchema
  38, // 60 -> k_EGCMsgGetUserGameStatsSchemaResponse
  40, // 61 -> k_EGCMsgGetUserStatsDEPRECATED
  41, // 62 -> k_EGCMsgGetUserStatsResponse
  4, // 63 -> k_EGCMsgAppInfoUpdated
  84, // 64 -> k_EGCMsgValidateSession
  85, // 65 -> k_EGCMsgValidateSessionResponse
  46, // 66 -> k_EGCMsgLookupAccountFromInput
  69, // 67 -> k_EGCMsgSendHTTPRequest
  70, // 68 -> k_EGCMsgSendHTTPRequestResponse
  63, // 69 -> k_EGCMsgPreTestSetup
  65, // 70 -> k_EGCMsgRecordSupportAction
  17, // 71 -> k_EGCMsgGetAccountDetails_DEPRECATED
  64, // 73 -> k_EGCMsgReceiveInterAppMessage
  12, // 74 -> k_EGCMsgFindAccounts
  62, // 75 -> k_EGCMsgPostAlert
  28, // 76 -> k_EGCMsgGetLicenses
  39, // 77 -> k_EGCMsgGetUserStats
  18, // 78 -> k_EGCMsgGetCommands
  19, // 79 -> k_EGCMsgGetCommandsResponse
  2, // 80 -> k_EGCMsgAddFreeLicense
  3, // 81 -> k_EGCMsgAddFreeLicenseResponse
  26, // 82 -> k_EGCMsgGetIPLocation
  27, // 83 -> k_EGCMsgGetIPLocationResponse
  79, // 84 -> k_EGCMsgSystemStatsSchema
  35, // 85 -> k_EGCMsgGetSystemStats
  36, // 86 -> k_EGCMsgGetSystemStatsResponse
  67, // 87 -> k_EGCMsgSendEmail
  68, // 88 -> k_EGCMsgSendEmailResponse
  20, // 89 -> k_EGCMsgGetEmailTemplate
  21, // 90 -> k_EGCMsgGetEmailTemplateResponse
  42, // 91 -> k_EGCMsgGrantGuestPass
  43, // 92 -> k_EGCMsgGrantGuestPassResponse
  15, // 93 -> k_EGCMsgGetAccountDetails
  16, // 94 -> k_EGCMsgGetAccountDetailsResponse
  31, // 95 -> k_EGCMsgGetPersonaNames
  32, // 96 -> k_EGCMsgGetPersonaNamesResponse
  60, // 97 -> k_EGCMsgMultiplexMsg
  61, // 98 -> k_EGCMsgMultiplexMsgResponse
  91, // 101 -> k_EGCMsgWebAPIRegisterInterfaces
  88, // 102 -> k_EGCMsgWebAPIJobRequest
  90, // 104 -> k_EGCMsgWebAPIJobRequestHttpResponse
  89, // 105 -> k_EGCMsgWebAPIJobRequestForwardResponse
  54, // 200 -> k_EGCMsgMemCachedGet
  55, // 201 -> k_EGCMsgMemCachedGetResponse
  56, // 202 -> k_EGCMsgMemCachedSet
  53, // 203 -> k_EGCMsgMemCachedDelete
  57, // 204 -> k_EGCMsgMemCachedStats
  58, // 205 -> k_EGCMsgMemCachedStatsResponse
  49, // 220 -> k_EGCMsgMasterSetDirectory
  50, // 221 -> k_EGCMsgMasterSetDirectoryResponse
  51, // 222 -> k_EGCMsgMasterSetWebAPIRouting
  52, // 223 -> k_EGCMsgMasterSetWebAPIRoutingResponse
  47, // 224 -> k_EGCMsgMasterSetClientMsgRouting
  48, // 225 -> k_EGCMsgMasterSetClientMsgRoutingResponse
  71, // 226 -> k_EGCMsgSetOptions
  72, // 227 -> k_EGCMsgSetOptionsResponse
  78, // 500 -> k_EGCMsgSystemBase2
  33, // 501 -> k_EGCMsgGetPurchaseTrustStatus
  34, // 502 -> k_EGCMsgGetPurchaseTrustStatusResponse
  82, // 503 -> k_EGCMsgUpdateSession
  13, // 504 -> k_EGCMsgGCAccountVacStatusChange
  5, // 505 -> k_EGCMsgCheckFriendship
  6, // 506 -> k_EGCMsgCheckFriendshipResponse
  29, // 507 -> k_EGCMsgGetPartnerAccountLink
  30, // 508 -> k_EGCMsgGetPartnerAccountLinkResponse
  8, // 512 -> k_EGCMsgDPPartnerMicroTxns
  9, // 513 -> k_EGCMsgDPPartnerMicroTxnsResponse
  83, // 518 -> k_EGCMsgVacVerificationChange
  0, // 519 -> k_EGCMsgAccountPhoneNumberChange
  45, // 523 -> k_EGCMsgInviteUserToLobby
  22, // 524 -> k_EGCMsgGetGamePersonalDataCategoriesRequest
  23, // 525 -> k_EGCMsgGetGamePersonalDataCategoriesResponse
  24, // 526 -> k_EGCMsgGetGamePersonalDataEntriesRequest
  25, // 527 -> k_EGCMsgGetGamePersonalDataEntriesResponse
  80, // 528 -> k_EGCMsgTerminateGamePersonalDataEntriesRequest
  81, // 529 -> k_EGCMsgTerminateGamePersonalDataEntriesResponse
  66, // 530 -> k_EGCMsgRecurringSubscriptionStatusChange
  10, // 531 -> k_EGCMsgDirectServiceMethod
  11, // 532 -> k_EGCMsgDirectServiceMethodResponse
};

const std::string& EGCSystemMsg_Name(
    EGCSystemMsg value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          EGCSystemMsg_entries,
          EGCSystemMsg_entries_by_number,
          92, EGCSystemMsg_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      EGCSystemMsg_entries,
      EGCSystemMsg_entries_by_number,
      92, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     EGCSystemMsg_strings[idx].get();
}
bool EGCSystemMsg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGCSystemMsg* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      EGCSystemMsg_entries, 92, name, &int_value);
  if (success) {
    *value = static_cast<EGCSystemMsg>(int_value);
  }
  return success;
}
bool ESOMsg_IsValid(int value) {
  switch (value) {
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ESOMsg_strings[8] = {};

static const char ESOMsg_names[] =
  "k_ESOMsg_CacheSubscribed"
  "k_ESOMsg_CacheSubscriptionCheck"
  "k_ESOMsg_CacheSubscriptionRefresh"
  "k_ESOMsg_CacheUnsubscribed"
  "k_ESOMsg_Create"
  "k_ESOMsg_Destroy"
  "k_ESOMsg_Update"
  "k_ESOMsg_UpdateMultiple";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ESOMsg_entries[] = {
  { {ESOMsg_names + 0, 24}, 24 },
  { {ESOMsg_names + 24, 31}, 27 },
  { {ESOMsg_names + 55, 33}, 28 },
  { {ESOMsg_names + 88, 26}, 25 },
  { {ESOMsg_names + 114, 15}, 21 },
  { {ESOMsg_names + 129, 16}, 23 },
  { {ESOMsg_names + 145, 15}, 22 },
  { {ESOMsg_names + 160, 23}, 26 },
};

static const int ESOMsg_entries_by_number[] = {
  4, // 21 -> k_ESOMsg_Create
  6, // 22 -> k_ESOMsg_Update
  5, // 23 -> k_ESOMsg_Destroy
  0, // 24 -> k_ESOMsg_CacheSubscribed
  3, // 25 -> k_ESOMsg_CacheUnsubscribed
  7, // 26 -> k_ESOMsg_UpdateMultiple
  1, // 27 -> k_ESOMsg_CacheSubscriptionCheck
  2, // 28 -> k_ESOMsg_CacheSubscriptionRefresh
};

const std::string& ESOMsg_Name(
    ESOMsg value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ESOMsg_entries,
          ESOMsg_entries_by_number,
          8, ESOMsg_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ESOMsg_entries,
      ESOMsg_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ESOMsg_strings[idx].get();
}
bool ESOMsg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ESOMsg* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ESOMsg_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<ESOMsg>(int_value);
  }
  return success;
}
bool EGCBaseClientMsg_IsValid(int value) {
  switch (value) {
    case 4004:
    case 4005:
    case 4006:
    case 4007:
    case 4009:
    case 4010:
    case 4011:
    case 4012:
    case 4013:
    case 4014:
    case 4015:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> EGCBaseClientMsg_strings[11] = {};

static const char EGCBaseClientMsg_names[] =
  "k_EMsgGCClientConnectionStatus"
  "k_EMsgGCClientHello"
  "k_EMsgGCClientHelloPW"
  "k_EMsgGCClientHelloPartner"
  "k_EMsgGCClientHelloR2"
  "k_EMsgGCClientHelloR3"
  "k_EMsgGCClientHelloR4"
  "k_EMsgGCClientWelcome"
  "k_EMsgGCServerConnectionStatus"
  "k_EMsgGCServerHello"
  "k_EMsgGCServerWelcome";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry EGCBaseClientMsg_entries[] = {
  { {EGCBaseClientMsg_names + 0, 30}, 4009 },
  { {EGCBaseClientMsg_names + 30, 19}, 4006 },
  { {EGCBaseClientMsg_names + 49, 21}, 4012 },
  { {EGCBaseClientMsg_names + 70, 26}, 4011 },
  { {EGCBaseClientMsg_names + 96, 21}, 4013 },
  { {EGCBaseClientMsg_names + 117, 21}, 4014 },
  { {EGCBaseClientMsg_names + 138, 21}, 4015 },
  { {EGCBaseClientMsg_names + 159, 21}, 4004 },
  { {EGCBaseClientMsg_names + 180, 30}, 4010 },
  { {EGCBaseClientMsg_names + 210, 19}, 4007 },
  { {EGCBaseClientMsg_names + 229, 21}, 4005 },
};

static const int EGCBaseClientMsg_entries_by_number[] = {
  7, // 4004 -> k_EMsgGCClientWelcome
  10, // 4005 -> k_EMsgGCServerWelcome
  1, // 4006 -> k_EMsgGCClientHello
  9, // 4007 -> k_EMsgGCServerHello
  0, // 4009 -> k_EMsgGCClientConnectionStatus
  8, // 4010 -> k_EMsgGCServerConnectionStatus
  3, // 4011 -> k_EMsgGCClientHelloPartner
  2, // 4012 -> k_EMsgGCClientHelloPW
  4, // 4013 -> k_EMsgGCClientHelloR2
  5, // 4014 -> k_EMsgGCClientHelloR3
  6, // 4015 -> k_EMsgGCClientHelloR4
};

const std::string& EGCBaseClientMsg_Name(
    EGCBaseClientMsg value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          EGCBaseClientMsg_entries,
          EGCBaseClientMsg_entries_by_number,
          11, EGCBaseClientMsg_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      EGCBaseClientMsg_entries,
      EGCBaseClientMsg_entries_by_number,
      11, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     EGCBaseClientMsg_strings[idx].get();
}
bool EGCBaseClientMsg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGCBaseClientMsg* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      EGCBaseClientMsg_entries, 11, name, &int_value);
  if (success) {
    *value = static_cast<EGCBaseClientMsg>(int_value);
  }
  return success;
}
bool EGCToGCMsg_IsValid(int value) {
  switch (value) {
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> EGCToGCMsg_strings[8] = {};

static const char EGCToGCMsg_names[] =
  "k_EGCToGCMsgMasterAck"
  "k_EGCToGCMsgMasterAckResponse"
  "k_EGCToGCMsgMasterStartupComplete"
  "k_EGCToGCMsgRouted"
  "k_EGCToGCMsgRoutedReply"
  "k_EMsgRequestSessionIP"
  "k_EMsgRequestSessionIPResponse"
  "k_EMsgUpdateSessionIP";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry EGCToGCMsg_entries[] = {
  { {EGCToGCMsg_names + 0, 21}, 150 },
  { {EGCToGCMsg_names + 21, 29}, 151 },
  { {EGCToGCMsg_names + 50, 33}, 157 },
  { {EGCToGCMsg_names + 83, 18}, 152 },
  { {EGCToGCMsg_names + 101, 23}, 153 },
  { {EGCToGCMsg_names + 124, 22}, 155 },
  { {EGCToGCMsg_names + 146, 30}, 156 },
  { {EGCToGCMsg_names + 176, 21}, 154 },
};

static const int EGCToGCMsg_entries_by_number[] = {
  0, // 150 -> k_EGCToGCMsgMasterAck
  1, // 151 -> k_EGCToGCMsgMasterAckResponse
  3, // 152 -> k_EGCToGCMsgRouted
  4, // 153 -> k_EGCToGCMsgRoutedReply
  7, // 154 -> k_EMsgUpdateSessionIP
  5, // 155 -> k_EMsgRequestSessionIP
  6, // 156 -> k_EMsgRequestSessionIPResponse
  2, // 157 -> k_EGCToGCMsgMasterStartupComplete
};

const std::string& EGCToGCMsg_Name(
    EGCToGCMsg value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          EGCToGCMsg_entries,
          EGCToGCMsg_entries_by_number,
          8, EGCToGCMsg_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      EGCToGCMsg_entries,
      EGCToGCMsg_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     EGCToGCMsg_strings[idx].get();
}
bool EGCToGCMsg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGCToGCMsg* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      EGCToGCMsg_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<EGCToGCMsg>(int_value);
  }
  return success;
}
bool ECommunityItemClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ECommunityItemClass_strings[11] = {};

static const char ECommunityItemClass_names[] =
  "k_ECommunityItemClass_Badge"
  "k_ECommunityItemClass_BoosterPack"
  "k_ECommunityItemClass_Consumable"
  "k_ECommunityItemClass_Emoticon"
  "k_ECommunityItemClass_GameCard"
  "k_ECommunityItemClass_GameGoo"
  "k_ECommunityItemClass_Invalid"
  "k_ECommunityItemClass_ProfileBackground"
  "k_ECommunityItemClass_ProfileModifier"
  "k_ECommunityItemClass_SalienItem"
  "k_ECommunityItemClass_Scene";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ECommunityItemClass_entries[] = {
  { {ECommunityItemClass_names + 0, 27}, 1 },
  { {ECommunityItemClass_names + 27, 33}, 5 },
  { {ECommunityItemClass_names + 60, 32}, 6 },
  { {ECommunityItemClass_names + 92, 30}, 4 },
  { {ECommunityItemClass_names + 122, 30}, 2 },
  { {ECommunityItemClass_names + 152, 29}, 7 },
  { {ECommunityItemClass_names + 181, 29}, 0 },
  { {ECommunityItemClass_names + 210, 39}, 3 },
  { {ECommunityItemClass_names + 249, 37}, 8 },
  { {ECommunityItemClass_names + 286, 32}, 10 },
  { {ECommunityItemClass_names + 318, 27}, 9 },
};

static const int ECommunityItemClass_entries_by_number[] = {
  6, // 0 -> k_ECommunityItemClass_Invalid
  0, // 1 -> k_ECommunityItemClass_Badge
  4, // 2 -> k_ECommunityItemClass_GameCard
  7, // 3 -> k_ECommunityItemClass_ProfileBackground
  3, // 4 -> k_ECommunityItemClass_Emoticon
  1, // 5 -> k_ECommunityItemClass_BoosterPack
  2, // 6 -> k_ECommunityItemClass_Consumable
  5, // 7 -> k_ECommunityItemClass_GameGoo
  8, // 8 -> k_ECommunityItemClass_ProfileModifier
  10, // 9 -> k_ECommunityItemClass_Scene
  9, // 10 -> k_ECommunityItemClass_SalienItem
};

const std::string& ECommunityItemClass_Name(
    ECommunityItemClass value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ECommunityItemClass_entries,
          ECommunityItemClass_entries_by_number,
          11, ECommunityItemClass_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ECommunityItemClass_entries,
      ECommunityItemClass_entries_by_number,
      11, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ECommunityItemClass_strings[idx].get();
}
bool ECommunityItemClass_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ECommunityItemClass* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ECommunityItemClass_entries, 11, name, &int_value);
  if (success) {
    *value = static_cast<ECommunityItemClass>(int_value);
  }
  return success;
}
bool ECommunityItemAttribute_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ECommunityItemAttribute_strings[10] = {};

static const char ECommunityItemAttribute_names[] =
  "k_ECommunityItemAttribute_CardBorder"
  "k_ECommunityItemAttribute_CommunityItemAppID"
  "k_ECommunityItemAttribute_CommunityItemType"
  "k_ECommunityItemAttribute_ExpiryTime"
  "k_ECommunityItemAttribute_Invalid"
  "k_ECommunityItemAttribute_IssueNumber"
  "k_ECommunityItemAttribute_Level"
  "k_ECommunityItemAttribute_ProfileModiferEnabled"
  "k_ECommunityItemAttribute_StorePackageID"
  "k_ECommunityItemAttribute_TradableTime";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ECommunityItemAttribute_entries[] = {
  { {ECommunityItemAttribute_names + 0, 36}, 1 },
  { {ECommunityItemAttribute_names + 36, 44}, 6 },
  { {ECommunityItemAttribute_names + 80, 43}, 7 },
  { {ECommunityItemAttribute_names + 123, 36}, 9 },
  { {ECommunityItemAttribute_names + 159, 33}, 0 },
  { {ECommunityItemAttribute_names + 192, 37}, 3 },
  { {ECommunityItemAttribute_names + 229, 31}, 2 },
  { {ECommunityItemAttribute_names + 260, 47}, 8 },
  { {ECommunityItemAttribute_names + 307, 40}, 5 },
  { {ECommunityItemAttribute_names + 347, 38}, 4 },
};

static const int ECommunityItemAttribute_entries_by_number[] = {
  4, // 0 -> k_ECommunityItemAttribute_Invalid
  0, // 1 -> k_ECommunityItemAttribute_CardBorder
  6, // 2 -> k_ECommunityItemAttribute_Level
  5, // 3 -> k_ECommunityItemAttribute_IssueNumber
  9, // 4 -> k_ECommunityItemAttribute_TradableTime
  8, // 5 -> k_ECommunityItemAttribute_StorePackageID
  1, // 6 -> k_ECommunityItemAttribute_CommunityItemAppID
  2, // 7 -> k_ECommunityItemAttribute_CommunityItemType
  7, // 8 -> k_ECommunityItemAttribute_ProfileModiferEnabled
  3, // 9 -> k_ECommunityItemAttribute_ExpiryTime
};

const std::string& ECommunityItemAttribute_Name(
    ECommunityItemAttribute value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ECommunityItemAttribute_entries,
          ECommunityItemAttribute_entries_by_number,
          10, ECommunityItemAttribute_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ECommunityItemAttribute_entries,
      ECommunityItemAttribute_entries_by_number,
      10, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ECommunityItemAttribute_strings[idx].get();
}
bool ECommunityItemAttribute_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ECommunityItemAttribute* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ECommunityItemAttribute_entries, 10, name, &int_value);
  if (success) {
    *value = static_cast<ECommunityItemAttribute>(int_value);
  }
  return success;
}

// ===================================================================

class CMsgGCHVacVerificationChange::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCHVacVerificationChange>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_verified(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCHVacVerificationChange::CMsgGCHVacVerificationChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCHVacVerificationChange)
}
CMsgGCHVacVerificationChange::CMsgGCHVacVerificationChange(const CMsgGCHVacVerificationChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CMsgGCHVacVerificationChange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.is_verified_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.steamid_, &from._impl_.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_verified_) -
    reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.is_verified_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCHVacVerificationChange)
}

inline void CMsgGCHVacVerificationChange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){uint64_t{0u}}
    , decltype(_impl_.appid_){0u}
    , decltype(_impl_.is_verified_){false}
  };
}

CMsgGCHVacVerificationChange::~CMsgGCHVacVerificationChange() {
  // @@protoc_insertion_point(destructor:CMsgGCHVacVerificationChange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCHVacVerificationChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCHVacVerificationChange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCHVacVerificationChange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCHVacVerificationChange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_verified_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.is_verified_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CMsgGCHVacVerificationChange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_verified = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_verified(&has_bits);
          _impl_.is_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCHVacVerificationChange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHVacVerificationChange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional bool is_verified = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_verified(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHVacVerificationChange)
  return target;
}

size_t CMsgGCHVacVerificationChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCHVacVerificationChange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional bool is_verified = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCHVacVerificationChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CMsgGCHVacVerificationChange*>(
      &from));
}

void CMsgGCHVacVerificationChange::MergeFrom(const CMsgGCHVacVerificationChange& from) {
  CMsgGCHVacVerificationChange* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCHVacVerificationChange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_verified_ = from._impl_.is_verified_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CMsgGCHVacVerificationChange::CopyFrom(const CMsgGCHVacVerificationChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCHVacVerificationChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHVacVerificationChange::IsInitialized() const {
  return true;
}

void CMsgGCHVacVerificationChange::InternalSwap(CMsgGCHVacVerificationChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCHVacVerificationChange, _impl_.is_verified_)
      + sizeof(CMsgGCHVacVerificationChange::_impl_.is_verified_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCHVacVerificationChange, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
}

std::string CMsgGCHVacVerificationChange::GetTypeName() const {
  return "CMsgGCHVacVerificationChange";
}


// ===================================================================

class CMsgGCHAccountPhoneNumberChange::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCHAccountPhoneNumberChange>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_phone_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_verified(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_identifying(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgGCHAccountPhoneNumberChange::CMsgGCHAccountPhoneNumberChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCHAccountPhoneNumberChange)
}
CMsgGCHAccountPhoneNumberChange::CMsgGCHAccountPhoneNumberChange(const CMsgGCHAccountPhoneNumberChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CMsgGCHAccountPhoneNumberChange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){}
    , decltype(_impl_.phone_id_){}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.is_verified_){}
    , decltype(_impl_.is_identifying_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.steamid_, &from._impl_.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_identifying_) -
    reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.is_identifying_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCHAccountPhoneNumberChange)
}

inline void CMsgGCHAccountPhoneNumberChange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){uint64_t{0u}}
    , decltype(_impl_.phone_id_){uint64_t{0u}}
    , decltype(_impl_.appid_){0u}
    , decltype(_impl_.is_verified_){false}
    , decltype(_impl_.is_identifying_){false}
  };
}

CMsgGCHAccountPhoneNumberChange::~CMsgGCHAccountPhoneNumberChange() {
  // @@protoc_insertion_point(destructor:CMsgGCHAccountPhoneNumberChange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCHAccountPhoneNumberChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCHAccountPhoneNumberChange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCHAccountPhoneNumberChange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCHAccountPhoneNumberChange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_identifying_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.is_identifying_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CMsgGCHAccountPhoneNumberChange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 phone_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_phone_id(&has_bits);
          _impl_.phone_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_verified = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_verified(&has_bits);
          _impl_.is_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_identifying = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_identifying(&has_bits);
          _impl_.is_identifying_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCHAccountPhoneNumberChange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHAccountPhoneNumberChange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional uint64 phone_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_phone_id(), target);
  }

  // optional bool is_verified = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_verified(), target);
  }

  // optional bool is_identifying = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_identifying(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHAccountPhoneNumberChange)
  return target;
}

size_t CMsgGCHAccountPhoneNumberChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCHAccountPhoneNumberChange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint64 phone_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_phone_id());
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional bool is_verified = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_identifying = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCHAccountPhoneNumberChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CMsgGCHAccountPhoneNumberChange*>(
      &from));
}

void CMsgGCHAccountPhoneNumberChange::MergeFrom(const CMsgGCHAccountPhoneNumberChange& from) {
  CMsgGCHAccountPhoneNumberChange* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCHAccountPhoneNumberChange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.phone_id_ = from._impl_.phone_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.is_verified_ = from._impl_.is_verified_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_identifying_ = from._impl_.is_identifying_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CMsgGCHAccountPhoneNumberChange::CopyFrom(const CMsgGCHAccountPhoneNumberChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCHAccountPhoneNumberChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHAccountPhoneNumberChange::IsInitialized() const {
  return true;
}

void CMsgGCHAccountPhoneNumberChange::InternalSwap(CMsgGCHAccountPhoneNumberChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCHAccountPhoneNumberChange, _impl_.is_identifying_)
      + sizeof(CMsgGCHAccountPhoneNumberChange::_impl_.is_identifying_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCHAccountPhoneNumberChange, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
}

std::string CMsgGCHAccountPhoneNumberChange::GetTypeName() const {
  return "CMsgGCHAccountPhoneNumberChange";
}


// ===================================================================

class CMsgGCHInviteUserToLobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCHInviteUserToLobby>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steamid_invited(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamid_lobby(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCHInviteUserToLobby::CMsgGCHInviteUserToLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCHInviteUserToLobby)
}
CMsgGCHInviteUserToLobby::CMsgGCHInviteUserToLobby(const CMsgGCHInviteUserToLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CMsgGCHInviteUserToLobby* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){}
    , decltype(_impl_.steamid_invited_){}
    , decltype(_impl_.steamid_lobby_){}
    , decltype(_impl_.appid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.steamid_, &from._impl_.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.appid_) -
    reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.appid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCHInviteUserToLobby)
}

inline void CMsgGCHInviteUserToLobby::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){uint64_t{0u}}
    , decltype(_impl_.steamid_invited_){uint64_t{0u}}
    , decltype(_impl_.steamid_lobby_){uint64_t{0u}}
    , decltype(_impl_.appid_){0u}
  };
}

CMsgGCHInviteUserToLobby::~CMsgGCHInviteUserToLobby() {
  // @@protoc_insertion_point(destructor:CMsgGCHInviteUserToLobby)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCHInviteUserToLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCHInviteUserToLobby::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCHInviteUserToLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCHInviteUserToLobby)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.appid_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.appid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CMsgGCHInviteUserToLobby::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid_invited = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_steamid_invited(&has_bits);
          _impl_.steamid_invited_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid_lobby = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_steamid_lobby(&has_bits);
          _impl_.steamid_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCHInviteUserToLobby::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHInviteUserToLobby)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional fixed64 steamid_invited = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steamid_invited(), target);
  }

  // optional fixed64 steamid_lobby = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(4, this->_internal_steamid_lobby(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHInviteUserToLobby)
  return target;
}

size_t CMsgGCHInviteUserToLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCHInviteUserToLobby)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid_invited = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid_lobby = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCHInviteUserToLobby::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CMsgGCHInviteUserToLobby*>(
      &from));
}

void CMsgGCHInviteUserToLobby::MergeFrom(const CMsgGCHInviteUserToLobby& from) {
  CMsgGCHInviteUserToLobby* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCHInviteUserToLobby)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.steamid_invited_ = from._impl_.steamid_invited_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.steamid_lobby_ = from._impl_.steamid_lobby_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CMsgGCHInviteUserToLobby::CopyFrom(const CMsgGCHInviteUserToLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCHInviteUserToLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHInviteUserToLobby::IsInitialized() const {
  return true;
}

void CMsgGCHInviteUserToLobby::InternalSwap(CMsgGCHInviteUserToLobby* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCHInviteUserToLobby, _impl_.appid_)
      + sizeof(CMsgGCHInviteUserToLobby::_impl_.appid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCHInviteUserToLobby, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
}

std::string CMsgGCHInviteUserToLobby::GetTypeName() const {
  return "CMsgGCHInviteUserToLobby";
}


// ===================================================================

class CMsgGCHRecurringSubscriptionStatusChange::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCHRecurringSubscriptionStatusChange>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_agreementid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCHRecurringSubscriptionStatusChange::CMsgGCHRecurringSubscriptionStatusChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCHRecurringSubscriptionStatusChange)
}
CMsgGCHRecurringSubscriptionStatusChange::CMsgGCHRecurringSubscriptionStatusChange(const CMsgGCHRecurringSubscriptionStatusChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CMsgGCHRecurringSubscriptionStatusChange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){}
    , decltype(_impl_.agreementid_){}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.active_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.steamid_, &from._impl_.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.active_) -
    reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.active_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCHRecurringSubscriptionStatusChange)
}

inline void CMsgGCHRecurringSubscriptionStatusChange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){uint64_t{0u}}
    , decltype(_impl_.agreementid_){uint64_t{0u}}
    , decltype(_impl_.appid_){0u}
    , decltype(_impl_.active_){false}
  };
}

CMsgGCHRecurringSubscriptionStatusChange::~CMsgGCHRecurringSubscriptionStatusChange() {
  // @@protoc_insertion_point(destructor:CMsgGCHRecurringSubscriptionStatusChange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCHRecurringSubscriptionStatusChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCHRecurringSubscriptionStatusChange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCHRecurringSubscriptionStatusChange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCHRecurringSubscriptionStatusChange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.active_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.active_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CMsgGCHRecurringSubscriptionStatusChange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 agreementid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_agreementid(&has_bits);
          _impl_.agreementid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool active = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_active(&has_bits);
          _impl_.active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCHRecurringSubscriptionStatusChange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHRecurringSubscriptionStatusChange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional fixed64 agreementid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(3, this->_internal_agreementid(), target);
  }

  // optional bool active = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHRecurringSubscriptionStatusChange)
  return target;
}

size_t CMsgGCHRecurringSubscriptionStatusChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCHRecurringSubscriptionStatusChange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 agreementid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional bool active = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCHRecurringSubscriptionStatusChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CMsgGCHRecurringSubscriptionStatusChange*>(
      &from));
}

void CMsgGCHRecurringSubscriptionStatusChange::MergeFrom(const CMsgGCHRecurringSubscriptionStatusChange& from) {
  CMsgGCHRecurringSubscriptionStatusChange* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCHRecurringSubscriptionStatusChange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.agreementid_ = from._impl_.agreementid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.active_ = from._impl_.active_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CMsgGCHRecurringSubscriptionStatusChange::CopyFrom(const CMsgGCHRecurringSubscriptionStatusChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCHRecurringSubscriptionStatusChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHRecurringSubscriptionStatusChange::IsInitialized() const {
  return true;
}

void CMsgGCHRecurringSubscriptionStatusChange::InternalSwap(CMsgGCHRecurringSubscriptionStatusChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCHRecurringSubscriptionStatusChange, _impl_.active_)
      + sizeof(CMsgGCHRecurringSubscriptionStatusChange::_impl_.active_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCHRecurringSubscriptionStatusChange, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
}

std::string CMsgGCHRecurringSubscriptionStatusChange::GetTypeName() const {
  return "CMsgGCHRecurringSubscriptionStatusChange";
}


// ===================================================================

class CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::_Internal {
 public:
  using HasBits = decltype(std::declval<CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute>()._impl_._has_bits_);
  static void set_has_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
}
CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute(const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.attribute_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.attribute_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.attribute_));
  // @@protoc_insertion_point(copy_constructor:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
}

inline void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){uint64_t{0u}}
    , decltype(_impl_.attribute_){0u}
  };
}

CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::~CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute() {
  // @@protoc_insertion_point(destructor:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::Clear() {
// @@protoc_insertion_point(message_clear_start:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.attribute_) -
        reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.attribute_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 attribute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_attribute(&has_bits);
          _impl_.attribute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 attribute = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_attribute(), target);
  }

  // optional uint64 value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  return target;
}

size_t CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_value());
    }

    // optional uint32 attribute = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attribute());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute*>(
      &from));
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::MergeFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& from) {
  CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.attribute_ = from._impl_.attribute_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::CopyFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::IsInitialized() const {
  return true;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::InternalSwap(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute, _impl_.attribute_)
      + sizeof(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::_impl_.attribute_)
      - PROTOBUF_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

std::string CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::GetTypeName() const {
  return "CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute";
}


// ===================================================================

class CQuest_PublisherAddCommunityItemsToPlayer_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CQuest_PublisherAddCommunityItemsToPlayer_Request>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_match_item_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_match_item_class(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_prefix_item_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_note(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CQuest_PublisherAddCommunityItemsToPlayer_Request::CQuest_PublisherAddCommunityItemsToPlayer_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CQuest_PublisherAddCommunityItemsToPlayer_Request)
}
CQuest_PublisherAddCommunityItemsToPlayer_Request::CQuest_PublisherAddCommunityItemsToPlayer_Request(const CQuest_PublisherAddCommunityItemsToPlayer_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CQuest_PublisherAddCommunityItemsToPlayer_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attributes_){from._impl_.attributes_}
    , decltype(_impl_.prefix_item_name_){}
    , decltype(_impl_.note_){}
    , decltype(_impl_.steamid_){}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.match_item_type_){}
    , decltype(_impl_.match_item_class_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.prefix_item_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prefix_item_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_prefix_item_name()) {
    _this->_impl_.prefix_item_name_.Set(from._internal_prefix_item_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.note_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_note()) {
    _this->_impl_.note_.Set(from._internal_note(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.steamid_, &from._impl_.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.match_item_class_) -
    reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.match_item_class_));
  // @@protoc_insertion_point(copy_constructor:CQuest_PublisherAddCommunityItemsToPlayer_Request)
}

inline void CQuest_PublisherAddCommunityItemsToPlayer_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attributes_){arena}
    , decltype(_impl_.prefix_item_name_){}
    , decltype(_impl_.note_){}
    , decltype(_impl_.steamid_){uint64_t{0u}}
    , decltype(_impl_.appid_){0u}
    , decltype(_impl_.match_item_type_){0u}
    , decltype(_impl_.match_item_class_){0u}
  };
  _impl_.prefix_item_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prefix_item_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.note_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CQuest_PublisherAddCommunityItemsToPlayer_Request::~CQuest_PublisherAddCommunityItemsToPlayer_Request() {
  // @@protoc_insertion_point(destructor:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CQuest_PublisherAddCommunityItemsToPlayer_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.~RepeatedPtrField();
  _impl_.prefix_item_name_.Destroy();
  _impl_.note_.Destroy();
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.prefix_item_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.note_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.match_item_class_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.match_item_class_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CQuest_PublisherAddCommunityItemsToPlayer_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 match_item_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_match_item_type(&has_bits);
          _impl_.match_item_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 match_item_class = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_match_item_class(&has_bits);
          _impl_.match_item_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string prefix_item_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_prefix_item_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute attributes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string note = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_note();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CQuest_PublisherAddCommunityItemsToPlayer_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 steamid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional uint32 match_item_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_match_item_type(), target);
  }

  // optional uint32 match_item_class = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_match_item_class(), target);
  }

  // optional string prefix_item_name = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_prefix_item_name(), target);
  }

  // repeated .CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute attributes = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attributes_size()); i < n; i++) {
    const auto& repfield = this->_internal_attributes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string note = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_note(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  return target;
}

size_t CQuest_PublisherAddCommunityItemsToPlayer_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute attributes = 6;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->_impl_.attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string prefix_item_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_prefix_item_name());
    }

    // optional string note = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_note());
    }

    // optional uint64 steamid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_steamid());
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 match_item_type = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_match_item_type());
    }

    // optional uint32 match_item_class = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_match_item_class());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CQuest_PublisherAddCommunityItemsToPlayer_Request*>(
      &from));
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::MergeFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Request& from) {
  CQuest_PublisherAddCommunityItemsToPlayer_Request* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_prefix_item_name(from._internal_prefix_item_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_note(from._internal_note());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.match_item_type_ = from._impl_.match_item_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.match_item_class_ = from._impl_.match_item_class_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::CopyFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQuest_PublisherAddCommunityItemsToPlayer_Request::IsInitialized() const {
  return true;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::InternalSwap(CQuest_PublisherAddCommunityItemsToPlayer_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prefix_item_name_, lhs_arena,
      &other->_impl_.prefix_item_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.note_, lhs_arena,
      &other->_impl_.note_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request, _impl_.match_item_class_)
      + sizeof(CQuest_PublisherAddCommunityItemsToPlayer_Request::_impl_.match_item_class_)
      - PROTOBUF_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
}

std::string CQuest_PublisherAddCommunityItemsToPlayer_Request::GetTypeName() const {
  return "CQuest_PublisherAddCommunityItemsToPlayer_Request";
}


// ===================================================================

class CQuest_PublisherAddCommunityItemsToPlayer_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CQuest_PublisherAddCommunityItemsToPlayer_Response>()._impl_._has_bits_);
  static void set_has_items_matched(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_items_granted(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CQuest_PublisherAddCommunityItemsToPlayer_Response::CQuest_PublisherAddCommunityItemsToPlayer_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CQuest_PublisherAddCommunityItemsToPlayer_Response)
}
CQuest_PublisherAddCommunityItemsToPlayer_Response::CQuest_PublisherAddCommunityItemsToPlayer_Response(const CQuest_PublisherAddCommunityItemsToPlayer_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CQuest_PublisherAddCommunityItemsToPlayer_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_matched_){}
    , decltype(_impl_.items_granted_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.items_matched_, &from._impl_.items_matched_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.items_granted_) -
    reinterpret_cast<char*>(&_impl_.items_matched_)) + sizeof(_impl_.items_granted_));
  // @@protoc_insertion_point(copy_constructor:CQuest_PublisherAddCommunityItemsToPlayer_Response)
}

inline void CQuest_PublisherAddCommunityItemsToPlayer_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_matched_){0u}
    , decltype(_impl_.items_granted_){0u}
  };
}

CQuest_PublisherAddCommunityItemsToPlayer_Response::~CQuest_PublisherAddCommunityItemsToPlayer_Response() {
  // @@protoc_insertion_point(destructor:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CQuest_PublisherAddCommunityItemsToPlayer_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.items_matched_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.items_granted_) -
        reinterpret_cast<char*>(&_impl_.items_matched_)) + sizeof(_impl_.items_granted_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CQuest_PublisherAddCommunityItemsToPlayer_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 items_matched = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_items_matched(&has_bits);
          _impl_.items_matched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 items_granted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_items_granted(&has_bits);
          _impl_.items_granted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CQuest_PublisherAddCommunityItemsToPlayer_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 items_matched = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_items_matched(), target);
  }

  // optional uint32 items_granted = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_items_granted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  return target;
}

size_t CQuest_PublisherAddCommunityItemsToPlayer_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 items_matched = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_items_matched());
    }

    // optional uint32 items_granted = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_items_granted());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CQuest_PublisherAddCommunityItemsToPlayer_Response*>(
      &from));
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::MergeFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Response& from) {
  CQuest_PublisherAddCommunityItemsToPlayer_Response* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.items_matched_ = from._impl_.items_matched_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.items_granted_ = from._impl_.items_granted_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::CopyFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQuest_PublisherAddCommunityItemsToPlayer_Response::IsInitialized() const {
  return true;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::InternalSwap(CQuest_PublisherAddCommunityItemsToPlayer_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Response, _impl_.items_granted_)
      + sizeof(CQuest_PublisherAddCommunityItemsToPlayer_Response::_impl_.items_granted_)
      - PROTOBUF_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Response, _impl_.items_matched_)>(
          reinterpret_cast<char*>(&_impl_.items_matched_),
          reinterpret_cast<char*>(&other->_impl_.items_matched_));
}

std::string CQuest_PublisherAddCommunityItemsToPlayer_Response::GetTypeName() const {
  return "CQuest_PublisherAddCommunityItemsToPlayer_Response";
}


// ===================================================================

class CCommunity_GamePersonalDataCategoryInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GamePersonalDataCategoryInfo>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_localization_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_template_file(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCommunity_GamePersonalDataCategoryInfo::CCommunity_GamePersonalDataCategoryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GamePersonalDataCategoryInfo)
}
CCommunity_GamePersonalDataCategoryInfo::CCommunity_GamePersonalDataCategoryInfo(const CCommunity_GamePersonalDataCategoryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CCommunity_GamePersonalDataCategoryInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.localization_token_){}
    , decltype(_impl_.template_file_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.localization_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localization_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_localization_token()) {
    _this->_impl_.localization_token_.Set(from._internal_localization_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.template_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.template_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_template_file()) {
    _this->_impl_.template_file_.Set(from._internal_template_file(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCommunity_GamePersonalDataCategoryInfo)
}

inline void CCommunity_GamePersonalDataCategoryInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.localization_token_){}
    , decltype(_impl_.template_file_){}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.localization_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localization_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.template_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.template_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCommunity_GamePersonalDataCategoryInfo::~CCommunity_GamePersonalDataCategoryInfo() {
  // @@protoc_insertion_point(destructor:CCommunity_GamePersonalDataCategoryInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCommunity_GamePersonalDataCategoryInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.localization_token_.Destroy();
  _impl_.template_file_.Destroy();
}

void CCommunity_GamePersonalDataCategoryInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCommunity_GamePersonalDataCategoryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GamePersonalDataCategoryInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.localization_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.template_file_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CCommunity_GamePersonalDataCategoryInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string localization_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_localization_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string template_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_template_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCommunity_GamePersonalDataCategoryInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GamePersonalDataCategoryInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // optional string localization_token = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_localization_token(), target);
  }

  // optional string template_file = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_template_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GamePersonalDataCategoryInfo)
  return target;
}

size_t CCommunity_GamePersonalDataCategoryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GamePersonalDataCategoryInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string localization_token = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_localization_token());
    }

    // optional string template_file = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_template_file());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GamePersonalDataCategoryInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CCommunity_GamePersonalDataCategoryInfo*>(
      &from));
}

void CCommunity_GamePersonalDataCategoryInfo::MergeFrom(const CCommunity_GamePersonalDataCategoryInfo& from) {
  CCommunity_GamePersonalDataCategoryInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GamePersonalDataCategoryInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_localization_token(from._internal_localization_token());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_template_file(from._internal_template_file());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CCommunity_GamePersonalDataCategoryInfo::CopyFrom(const CCommunity_GamePersonalDataCategoryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GamePersonalDataCategoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GamePersonalDataCategoryInfo::IsInitialized() const {
  return true;
}

void CCommunity_GamePersonalDataCategoryInfo::InternalSwap(CCommunity_GamePersonalDataCategoryInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.localization_token_, lhs_arena,
      &other->_impl_.localization_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.template_file_, lhs_arena,
      &other->_impl_.template_file_, rhs_arena
  );
}

std::string CCommunity_GamePersonalDataCategoryInfo::GetTypeName() const {
  return "CCommunity_GamePersonalDataCategoryInfo";
}


// ===================================================================

class CCommunity_GetGamePersonalDataCategories_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetGamePersonalDataCategories_Request>()._impl_._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCommunity_GetGamePersonalDataCategories_Request::CCommunity_GetGamePersonalDataCategories_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetGamePersonalDataCategories_Request)
}
CCommunity_GetGamePersonalDataCategories_Request::CCommunity_GetGamePersonalDataCategories_Request(const CCommunity_GetGamePersonalDataCategories_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CCommunity_GetGamePersonalDataCategories_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.appid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.appid_ = from._impl_.appid_;
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetGamePersonalDataCategories_Request)
}

inline void CCommunity_GetGamePersonalDataCategories_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.appid_){0u}
  };
}

CCommunity_GetGamePersonalDataCategories_Request::~CCommunity_GetGamePersonalDataCategories_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetGamePersonalDataCategories_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCommunity_GetGamePersonalDataCategories_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCommunity_GetGamePersonalDataCategories_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCommunity_GetGamePersonalDataCategories_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetGamePersonalDataCategories_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.appid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CCommunity_GetGamePersonalDataCategories_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCommunity_GetGamePersonalDataCategories_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetGamePersonalDataCategories_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetGamePersonalDataCategories_Request)
  return target;
}

size_t CCommunity_GetGamePersonalDataCategories_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetGamePersonalDataCategories_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetGamePersonalDataCategories_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CCommunity_GetGamePersonalDataCategories_Request*>(
      &from));
}

void CCommunity_GetGamePersonalDataCategories_Request::MergeFrom(const CCommunity_GetGamePersonalDataCategories_Request& from) {
  CCommunity_GetGamePersonalDataCategories_Request* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetGamePersonalDataCategories_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _this->_internal_set_appid(from._internal_appid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CCommunity_GetGamePersonalDataCategories_Request::CopyFrom(const CCommunity_GetGamePersonalDataCategories_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetGamePersonalDataCategories_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetGamePersonalDataCategories_Request::IsInitialized() const {
  return true;
}

void CCommunity_GetGamePersonalDataCategories_Request::InternalSwap(CCommunity_GetGamePersonalDataCategories_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.appid_, other->_impl_.appid_);
}

std::string CCommunity_GetGamePersonalDataCategories_Request::GetTypeName() const {
  return "CCommunity_GetGamePersonalDataCategories_Request";
}


// ===================================================================

class CCommunity_GetGamePersonalDataCategories_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetGamePersonalDataCategories_Response>()._impl_._has_bits_);
  static void set_has_app_assets_basename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCommunity_GetGamePersonalDataCategories_Response::CCommunity_GetGamePersonalDataCategories_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetGamePersonalDataCategories_Response)
}
CCommunity_GetGamePersonalDataCategories_Response::CCommunity_GetGamePersonalDataCategories_Response(const CCommunity_GetGamePersonalDataCategories_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CCommunity_GetGamePersonalDataCategories_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.categories_){from._impl_.categories_}
    , decltype(_impl_.app_assets_basename_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.app_assets_basename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_assets_basename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_assets_basename()) {
    _this->_impl_.app_assets_basename_.Set(from._internal_app_assets_basename(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetGamePersonalDataCategories_Response)
}

inline void CCommunity_GetGamePersonalDataCategories_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.categories_){arena}
    , decltype(_impl_.app_assets_basename_){}
  };
  _impl_.app_assets_basename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_assets_basename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCommunity_GetGamePersonalDataCategories_Response::~CCommunity_GetGamePersonalDataCategories_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetGamePersonalDataCategories_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCommunity_GetGamePersonalDataCategories_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.categories_.~RepeatedPtrField();
  _impl_.app_assets_basename_.Destroy();
}

void CCommunity_GetGamePersonalDataCategories_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCommunity_GetGamePersonalDataCategories_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetGamePersonalDataCategories_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.categories_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.app_assets_basename_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CCommunity_GetGamePersonalDataCategories_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CCommunity_GamePersonalDataCategoryInfo categories = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_categories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string app_assets_basename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_assets_basename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCommunity_GetGamePersonalDataCategories_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetGamePersonalDataCategories_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CCommunity_GamePersonalDataCategoryInfo categories = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_categories_size()); i < n; i++) {
    const auto& repfield = this->_internal_categories(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string app_assets_basename = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_assets_basename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetGamePersonalDataCategories_Response)
  return target;
}

size_t CCommunity_GetGamePersonalDataCategories_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetGamePersonalDataCategories_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCommunity_GamePersonalDataCategoryInfo categories = 1;
  total_size += 1UL * this->_internal_categories_size();
  for (const auto& msg : this->_impl_.categories_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string app_assets_basename = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_assets_basename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetGamePersonalDataCategories_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CCommunity_GetGamePersonalDataCategories_Response*>(
      &from));
}

void CCommunity_GetGamePersonalDataCategories_Response::MergeFrom(const CCommunity_GetGamePersonalDataCategories_Response& from) {
  CCommunity_GetGamePersonalDataCategories_Response* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetGamePersonalDataCategories_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.categories_.MergeFrom(from._impl_.categories_);
  if (from._internal_has_app_assets_basename()) {
    _this->_internal_set_app_assets_basename(from._internal_app_assets_basename());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CCommunity_GetGamePersonalDataCategories_Response::CopyFrom(const CCommunity_GetGamePersonalDataCategories_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetGamePersonalDataCategories_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetGamePersonalDataCategories_Response::IsInitialized() const {
  return true;
}

void CCommunity_GetGamePersonalDataCategories_Response::InternalSwap(CCommunity_GetGamePersonalDataCategories_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.categories_.InternalSwap(&other->_impl_.categories_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_assets_basename_, lhs_arena,
      &other->_impl_.app_assets_basename_, rhs_arena
  );
}

std::string CCommunity_GetGamePersonalDataCategories_Response::GetTypeName() const {
  return "CCommunity_GetGamePersonalDataCategories_Response";
}


// ===================================================================

class CCommunity_GetGamePersonalDataEntries_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetGamePersonalDataEntries_Request>()._impl_._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_continue_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCommunity_GetGamePersonalDataEntries_Request::CCommunity_GetGamePersonalDataEntries_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetGamePersonalDataEntries_Request)
}
CCommunity_GetGamePersonalDataEntries_Request::CCommunity_GetGamePersonalDataEntries_Request(const CCommunity_GetGamePersonalDataEntries_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CCommunity_GetGamePersonalDataEntries_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.continue_token_){}
    , decltype(_impl_.steamid_){}
    , decltype(_impl_.appid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.continue_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.continue_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_continue_token()) {
    _this->_impl_.continue_token_.Set(from._internal_continue_token(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.steamid_, &from._impl_.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.appid_) -
    reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.appid_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetGamePersonalDataEntries_Request)
}

inline void CCommunity_GetGamePersonalDataEntries_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.continue_token_){}
    , decltype(_impl_.steamid_){uint64_t{0u}}
    , decltype(_impl_.appid_){0u}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.continue_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.continue_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCommunity_GetGamePersonalDataEntries_Request::~CCommunity_GetGamePersonalDataEntries_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetGamePersonalDataEntries_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCommunity_GetGamePersonalDataEntries_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.continue_token_.Destroy();
}

void CCommunity_GetGamePersonalDataEntries_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCommunity_GetGamePersonalDataEntries_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetGamePersonalDataEntries_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.continue_token_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.appid_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.appid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CCommunity_GetGamePersonalDataEntries_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string continue_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_continue_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCommunity_GetGamePersonalDataEntries_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetGamePersonalDataEntries_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_steamid(), target);
  }

  // optional string type = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  // optional string continue_token = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_continue_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetGamePersonalDataEntries_Request)
  return target;
}

size_t CCommunity_GetGamePersonalDataEntries_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetGamePersonalDataEntries_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string type = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string continue_token = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_continue_token());
    }

    // optional uint64 steamid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_steamid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetGamePersonalDataEntries_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CCommunity_GetGamePersonalDataEntries_Request*>(
      &from));
}

void CCommunity_GetGamePersonalDataEntries_Request::MergeFrom(const CCommunity_GetGamePersonalDataEntries_Request& from) {
  CCommunity_GetGamePersonalDataEntries_Request* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetGamePersonalDataEntries_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_continue_token(from._internal_continue_token());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CCommunity_GetGamePersonalDataEntries_Request::CopyFrom(const CCommunity_GetGamePersonalDataEntries_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetGamePersonalDataEntries_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetGamePersonalDataEntries_Request::IsInitialized() const {
  return true;
}

void CCommunity_GetGamePersonalDataEntries_Request::InternalSwap(CCommunity_GetGamePersonalDataEntries_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.continue_token_, lhs_arena,
      &other->_impl_.continue_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Request, _impl_.appid_)
      + sizeof(CCommunity_GetGamePersonalDataEntries_Request::_impl_.appid_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Request, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
}

std::string CCommunity_GetGamePersonalDataEntries_Request::GetTypeName() const {
  return "CCommunity_GetGamePersonalDataEntries_Request";
}


// ===================================================================

class CCommunity_GetGamePersonalDataEntries_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetGamePersonalDataEntries_Response>()._impl_._has_bits_);
  static void set_has_gceresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_continue_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_continue_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCommunity_GetGamePersonalDataEntries_Response::CCommunity_GetGamePersonalDataEntries_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetGamePersonalDataEntries_Response)
}
CCommunity_GetGamePersonalDataEntries_Response::CCommunity_GetGamePersonalDataEntries_Response(const CCommunity_GetGamePersonalDataEntries_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CCommunity_GetGamePersonalDataEntries_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.continue_token_){}
    , decltype(_impl_.continue_text_){}
    , decltype(_impl_.gceresult_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.continue_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.continue_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_continue_token()) {
    _this->_impl_.continue_token_.Set(from._internal_continue_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.continue_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.continue_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_continue_text()) {
    _this->_impl_.continue_text_.Set(from._internal_continue_text(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.gceresult_ = from._impl_.gceresult_;
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetGamePersonalDataEntries_Response)
}

inline void CCommunity_GetGamePersonalDataEntries_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){arena}
    , decltype(_impl_.continue_token_){}
    , decltype(_impl_.continue_text_){}
    , decltype(_impl_.gceresult_){0u}
  };
  _impl_.continue_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.continue_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.continue_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.continue_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCommunity_GetGamePersonalDataEntries_Response::~CCommunity_GetGamePersonalDataEntries_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetGamePersonalDataEntries_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCommunity_GetGamePersonalDataEntries_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
  _impl_.continue_token_.Destroy();
  _impl_.continue_text_.Destroy();
}

void CCommunity_GetGamePersonalDataEntries_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCommunity_GetGamePersonalDataEntries_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetGamePersonalDataEntries_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.continue_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.continue_text_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.gceresult_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CCommunity_GetGamePersonalDataEntries_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 gceresult = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_gceresult(&has_bits);
          _impl_.gceresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_entries();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string continue_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_continue_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string continue_text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_continue_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCommunity_GetGamePersonalDataEntries_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetGamePersonalDataEntries_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 gceresult = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gceresult(), target);
  }

  // repeated string entries = 2;
  for (int i = 0, n = this->_internal_entries_size(); i < n; i++) {
    const auto& s = this->_internal_entries(i);
    target = stream->WriteString(2, s, target);
  }

  // optional string continue_token = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_continue_token(), target);
  }

  // optional string continue_text = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_continue_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetGamePersonalDataEntries_Response)
  return target;
}

size_t CCommunity_GetGamePersonalDataEntries_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetGamePersonalDataEntries_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string entries = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.entries_.size());
  for (int i = 0, n = _impl_.entries_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.entries_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string continue_token = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_continue_token());
    }

    // optional string continue_text = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_continue_text());
    }

    // optional uint32 gceresult = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gceresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetGamePersonalDataEntries_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CCommunity_GetGamePersonalDataEntries_Response*>(
      &from));
}

void CCommunity_GetGamePersonalDataEntries_Response::MergeFrom(const CCommunity_GetGamePersonalDataEntries_Response& from) {
  CCommunity_GetGamePersonalDataEntries_Response* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetGamePersonalDataEntries_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_continue_token(from._internal_continue_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_continue_text(from._internal_continue_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.gceresult_ = from._impl_.gceresult_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CCommunity_GetGamePersonalDataEntries_Response::CopyFrom(const CCommunity_GetGamePersonalDataEntries_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetGamePersonalDataEntries_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetGamePersonalDataEntries_Response::IsInitialized() const {
  return true;
}

void CCommunity_GetGamePersonalDataEntries_Response::InternalSwap(CCommunity_GetGamePersonalDataEntries_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.continue_token_, lhs_arena,
      &other->_impl_.continue_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.continue_text_, lhs_arena,
      &other->_impl_.continue_text_, rhs_arena
  );
  swap(_impl_.gceresult_, other->_impl_.gceresult_);
}

std::string CCommunity_GetGamePersonalDataEntries_Response::GetTypeName() const {
  return "CCommunity_GetGamePersonalDataEntries_Response";
}


// ===================================================================

class CCommunity_TerminateGamePersonalDataEntries_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_TerminateGamePersonalDataEntries_Request>()._impl_._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCommunity_TerminateGamePersonalDataEntries_Request::CCommunity_TerminateGamePersonalDataEntries_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCommunity_TerminateGamePersonalDataEntries_Request)
}
CCommunity_TerminateGamePersonalDataEntries_Request::CCommunity_TerminateGamePersonalDataEntries_Request(const CCommunity_TerminateGamePersonalDataEntries_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CCommunity_TerminateGamePersonalDataEntries_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){}
    , decltype(_impl_.appid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.steamid_, &from._impl_.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.appid_) -
    reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.appid_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_TerminateGamePersonalDataEntries_Request)
}

inline void CCommunity_TerminateGamePersonalDataEntries_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){uint64_t{0u}}
    , decltype(_impl_.appid_){0u}
  };
}

CCommunity_TerminateGamePersonalDataEntries_Request::~CCommunity_TerminateGamePersonalDataEntries_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_TerminateGamePersonalDataEntries_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCommunity_TerminateGamePersonalDataEntries_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCommunity_TerminateGamePersonalDataEntries_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCommunity_TerminateGamePersonalDataEntries_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_TerminateGamePersonalDataEntries_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.appid_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.appid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CCommunity_TerminateGamePersonalDataEntries_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCommunity_TerminateGamePersonalDataEntries_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_TerminateGamePersonalDataEntries_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_TerminateGamePersonalDataEntries_Request)
  return target;
}

size_t CCommunity_TerminateGamePersonalDataEntries_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_TerminateGamePersonalDataEntries_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 steamid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_steamid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_TerminateGamePersonalDataEntries_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CCommunity_TerminateGamePersonalDataEntries_Request*>(
      &from));
}

void CCommunity_TerminateGamePersonalDataEntries_Request::MergeFrom(const CCommunity_TerminateGamePersonalDataEntries_Request& from) {
  CCommunity_TerminateGamePersonalDataEntries_Request* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_TerminateGamePersonalDataEntries_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CCommunity_TerminateGamePersonalDataEntries_Request::CopyFrom(const CCommunity_TerminateGamePersonalDataEntries_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_TerminateGamePersonalDataEntries_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_TerminateGamePersonalDataEntries_Request::IsInitialized() const {
  return true;
}

void CCommunity_TerminateGamePersonalDataEntries_Request::InternalSwap(CCommunity_TerminateGamePersonalDataEntries_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_TerminateGamePersonalDataEntries_Request, _impl_.appid_)
      + sizeof(CCommunity_TerminateGamePersonalDataEntries_Request::_impl_.appid_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_TerminateGamePersonalDataEntries_Request, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
}

std::string CCommunity_TerminateGamePersonalDataEntries_Request::GetTypeName() const {
  return "CCommunity_TerminateGamePersonalDataEntries_Request";
}


// ===================================================================

class CCommunity_TerminateGamePersonalDataEntries_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_TerminateGamePersonalDataEntries_Response>()._impl_._has_bits_);
  static void set_has_gceresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCommunity_TerminateGamePersonalDataEntries_Response::CCommunity_TerminateGamePersonalDataEntries_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCommunity_TerminateGamePersonalDataEntries_Response)
}
CCommunity_TerminateGamePersonalDataEntries_Response::CCommunity_TerminateGamePersonalDataEntries_Response(const CCommunity_TerminateGamePersonalDataEntries_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CCommunity_TerminateGamePersonalDataEntries_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gceresult_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.gceresult_ = from._impl_.gceresult_;
  // @@protoc_insertion_point(copy_constructor:CCommunity_TerminateGamePersonalDataEntries_Response)
}

inline void CCommunity_TerminateGamePersonalDataEntries_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gceresult_){0u}
  };
}

CCommunity_TerminateGamePersonalDataEntries_Response::~CCommunity_TerminateGamePersonalDataEntries_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_TerminateGamePersonalDataEntries_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCommunity_TerminateGamePersonalDataEntries_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCommunity_TerminateGamePersonalDataEntries_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCommunity_TerminateGamePersonalDataEntries_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_TerminateGamePersonalDataEntries_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gceresult_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CCommunity_TerminateGamePersonalDataEntries_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 gceresult = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_gceresult(&has_bits);
          _impl_.gceresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCommunity_TerminateGamePersonalDataEntries_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_TerminateGamePersonalDataEntries_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 gceresult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gceresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_TerminateGamePersonalDataEntries_Response)
  return target;
}

size_t CCommunity_TerminateGamePersonalDataEntries_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_TerminateGamePersonalDataEntries_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 gceresult = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gceresult());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_TerminateGamePersonalDataEntries_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CCommunity_TerminateGamePersonalDataEntries_Response*>(
      &from));
}

void CCommunity_TerminateGamePersonalDataEntries_Response::MergeFrom(const CCommunity_TerminateGamePersonalDataEntries_Response& from) {
  CCommunity_TerminateGamePersonalDataEntries_Response* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_TerminateGamePersonalDataEntries_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gceresult()) {
    _this->_internal_set_gceresult(from._internal_gceresult());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CCommunity_TerminateGamePersonalDataEntries_Response::CopyFrom(const CCommunity_TerminateGamePersonalDataEntries_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_TerminateGamePersonalDataEntries_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_TerminateGamePersonalDataEntries_Response::IsInitialized() const {
  return true;
}

void CCommunity_TerminateGamePersonalDataEntries_Response::InternalSwap(CCommunity_TerminateGamePersonalDataEntries_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.gceresult_, other->_impl_.gceresult_);
}

std::string CCommunity_TerminateGamePersonalDataEntries_Response::GetTypeName() const {
  return "CCommunity_TerminateGamePersonalDataEntries_Response";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgGCHVacVerificationChange*
Arena::CreateMaybeMessage< ::CMsgGCHVacVerificationChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCHVacVerificationChange >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCHAccountPhoneNumberChange*
Arena::CreateMaybeMessage< ::CMsgGCHAccountPhoneNumberChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCHAccountPhoneNumberChange >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCHInviteUserToLobby*
Arena::CreateMaybeMessage< ::CMsgGCHInviteUserToLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCHInviteUserToLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCHRecurringSubscriptionStatusChange*
Arena::CreateMaybeMessage< ::CMsgGCHRecurringSubscriptionStatusChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCHRecurringSubscriptionStatusChange >(arena);
}
template<> PROTOBUF_NOINLINE ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute*
Arena::CreateMaybeMessage< ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute >(arena);
}
template<> PROTOBUF_NOINLINE ::CQuest_PublisherAddCommunityItemsToPlayer_Request*
Arena::CreateMaybeMessage< ::CQuest_PublisherAddCommunityItemsToPlayer_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CQuest_PublisherAddCommunityItemsToPlayer_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CQuest_PublisherAddCommunityItemsToPlayer_Response*
Arena::CreateMaybeMessage< ::CQuest_PublisherAddCommunityItemsToPlayer_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CQuest_PublisherAddCommunityItemsToPlayer_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GamePersonalDataCategoryInfo*
Arena::CreateMaybeMessage< ::CCommunity_GamePersonalDataCategoryInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GamePersonalDataCategoryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetGamePersonalDataCategories_Request*
Arena::CreateMaybeMessage< ::CCommunity_GetGamePersonalDataCategories_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetGamePersonalDataCategories_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetGamePersonalDataCategories_Response*
Arena::CreateMaybeMessage< ::CCommunity_GetGamePersonalDataCategories_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetGamePersonalDataCategories_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetGamePersonalDataEntries_Request*
Arena::CreateMaybeMessage< ::CCommunity_GetGamePersonalDataEntries_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetGamePersonalDataEntries_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetGamePersonalDataEntries_Response*
Arena::CreateMaybeMessage< ::CCommunity_GetGamePersonalDataEntries_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetGamePersonalDataEntries_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_TerminateGamePersonalDataEntries_Request*
Arena::CreateMaybeMessage< ::CCommunity_TerminateGamePersonalDataEntries_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_TerminateGamePersonalDataEntries_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_TerminateGamePersonalDataEntries_Response*
Arena::CreateMaybeMessage< ::CCommunity_TerminateGamePersonalDataEntries_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_TerminateGamePersonalDataEntries_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
